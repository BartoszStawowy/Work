###
# Program created for export live events every 2 minutes #
# to txt file, between devices which are connect to hub  #
###

import time
from selenium import webdriver
from tkinter import *
import getpass
import threading
import datetime
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC



writing = True
browser = webdriver.Firefox()


#export logs every 2 minutes to txt file#
def logs():
  global writing
  global browser
  logs_content = browser.find_element_by_css_selector(".content")
  if writing:
      curent_time = datetime.datetime.now()
      threading.Timer(120, logs).start()
      save_path = 'C:/Users/' + getpass.getuser() + '/Desktop/Logs ' + curent_time.strftime("%d-%B-%Y") + '.txt'
      with open(save_path, "w") as logs_txt:
          logs_txt.write(logs_content.text)
#after user press 'kill me' button, function scaning exported txt file and create another with warn and errors#
def finding_errors():
   curent_time = datetime.datetime.now()
   txt_file = open('C:/Users/' + getpass.getuser() + '/Desktop/Logs ' + curent_time.strftime("%d-%B-%Y") + '.txt', 'rt')
   errors_list = []
   for line in txt_file:
       if "error" in line:
           errors_list.append(line)
       elif "warn" in line:
           errors_list.append(line)
       else:
           errors_list.insert(0, 'Lack of errors and warns, be happy.')
       errors_list = '\n'.join(errors_list)
   save_path = 'C:/Users/' + getpass.getuser() + '/Desktop/errors from logs.txt'
   with open(save_path, 'w') as errors:
       errors.write(errors_list)

#log in to ide website#
def enter_to_IDE():
  username = browser.find_element_by_id("username")
  username_input = login.get()
  username.send_keys(username_input)
  browser.find_element_by_id("next-step-btn").click()
  time.sleep(5)
  password_css = browser.find_element_by_id("password")
  password_input = password.get()
  password_css.send_keys(password_input)
  browser.find_element_by_id("login-user-btn").click()
  WebDriverWait(browser, 10000).until(EC.visibility_of_element_located((By.CSS_SELECTOR, '.content')))
  logs()


#link with american shard server#
def US_shard():
  global browser
  browser.get('link')
  enter_to_IDE()

#link with UE shard server#
def EU_shard():
  global browser
  browser.get('link')
  enter_to_IDE()
#function to stop exporting-program is shuting down# 
def kill():
  global writing
  global browser
  writing = False
  browser.quit()
  window.quit()
  window.destroy()
  finding_errors()

#modeling GUI#
window = Tk()
window.title('IoT logs export')
window['bg'] = 'steelblue1'

heading = Label(window, text = 'Export logs to txt', font = 'bold', bg = 'steelblue1')
heading.grid(row = 0, columnspan = 4)

login = StringVar()
login = Entry(window, textvariable = login)
password = StringVar()
password = Entry(window, textvariable = password)

login_heading = Label(window, text = 'Login: ',bg = 'steelblue1')
password_heading = Label(window, text = 'Password: ', bg = 'steelblue1')

menu = Menu(window)
window.config(menu = menu)

subMenu = Menu(menu)
menu.add_cascade(label = 'Shards: ', menu = subMenu)
subMenu.add_command(label = 'US Shard', command = lambda: US_shard())
subMenu.add_command(label = 'EU Shard', command = lambda: EU_shard())


stop_button = Button(window, text = 'Kill me!', fg = 'black', padx = 20, pady = 5, command = lambda: kill())


login_heading.grid(row = 1, column = 1,padx = 30, pady = 10)
password_heading.grid(row = 2, column = 1,padx = 30, pady = 10)
login.grid(row = 1, column = 2, padx = 40, pady = 10)
password.grid(row = 2, column = 2, padx = 40, pady = 10)
stop_button.grid(row = 3, columnspan = 4)


window.mainloop()
